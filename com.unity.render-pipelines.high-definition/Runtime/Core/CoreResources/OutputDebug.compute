#pragma only_renderers d3d11 ps4 xboxone vulkan metal switch

#pragma kernel CSMain

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Macros.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Sampling/Sampling.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Packing.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Random.hlsl"

  Texture2D<float4> _PDF;
  Texture2D<float4> _Samples;
RWTexture2D<float4> _Output;
uint4               _Sizes;

SamplerState sampler_LinearClamp;

#define _IOSize       _Sizes.xy
#define _SamplesCount _Sizes.z

[numthreads(8, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if (id.x < _SamplesCount)
    {
        float2 dp = 1.0f/_IOSize;

        const int r = 0;
        UNITY_LOOP
        for (int i = -r; i <= r; ++i)
        {
            UNITY_LOOP
            for (int j = -r; j <= r; ++j)
            {
                float2 uv     = _Samples[uint2(id.x, 0)].xy + float2(i, j)*dp;
                uint2  posOut = uint2(floor(uv*_IOSize));
                float4 cur    = _Output[posOut];
                _Output[posOut] = float4(cur.r, (4096.0f).xxx);
            }
        }
    }
}
